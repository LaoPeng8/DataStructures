理解红黑树就要只要红黑树是怎么来的, 那么这篇博客讲的真的很好
虽然这篇博客讲的是2-3树，那么红黑树实际是基于2-3-4树的，不过我是觉得2-3树与2-3-4树基本一样，就是多了个4节点
2-3树当 向一个3节点中插入节点，就变成了4节点，然后此时该4节点是需要进行分解融合操作的，即将中间节点向上融合
我感觉分解融合的操作 和 平衡二叉树的旋转差不多，都是为了树型结构保存平衡，但是由于3节点的存在，相当于就是说旋转的次数减少了 1/2
https://blog.csdn.net/chen_zhang_yu/article/details/52415077


2-3-4树 比 2-3树 多一个4节点，显然就是需要进行比2-3树更少次的分解融合操作，即可以跟少次的进行旋转
https://zhuanlan.zhihu.com/p/269069974

b站视频还还得是看, 看的人多得视频, 找了个红黑树视频6个小时, 正常得都2个小时, 感觉6个小时得应该详细一些, 妈的一直在划水,
而且感觉对idea使用的很不熟练, 最后写新增节点, 代码都写错了, 左旋操作调用的获取左子节点的方法, 一堆bug, 最关键的是居然跑起来了, 还没有报错
运行结果还一样, 真是太离谱了, 我估计他自己都搞不太清楚这个代码怎么写的, 跟nm背下来的代码一样, 我真的是笑了.

我好像知道为什么, 它的能跑, 而我的不会右旋操作了, 在判断当前节点的叔叔节点时 它是直接判断 是否 == RED, == RED则颜色翻转向上递归, != RED则旋转,
而我是 直接判断 是否 != null, 这样一来性质都不一样了, 本来是叔叔节点是RED就进行颜色翻转向上递归, 我直接写 != null, 则只要有叔叔节点就颜色翻转向上递归(又没旋转), 就算叔叔节点是黑色, 也是颜色翻转向上递归(实际应该是要旋转)
关键它写的 是开始写插入方法之前就 写了这个判断颜色的方法  == null 就是黑色, 那么它叔叔节点不为null的情况(黑色)是翻转, 而我的叔叔节点不为null则不会翻转, 这就出问题了
之前写这个判断颜色的方法时也不说清楚, 说什么 TreeMap 就是这样写的, == null 就是黑色
我真的是笑了又有一点可以证明它自己都没搞明白